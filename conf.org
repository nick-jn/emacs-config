* Startup options
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (setq debug-on-error t)

  (add-to-list 'load-path "~/.emacs.d/various/")
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  ;; (add-to-list 'package-archives
  ;;             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
  (eval-when-compile
    (require 'use-package))

  ;; (toggle-frame-fullscreen)
  ;; (toggle-frame-maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (fringe-mode 0)
  (add-hook 'after-init-hook 'ibuffer) ; show ibuffer after emacs starts
  ;; (find-file "~/.emacs.d/myconfig/conf.org")    ; load conf.org
#+END_SRC
* Various options
#+begin_src emacs-lisp :tangle yes
  (setq display-time-default-load-average t) ; display load average in the modeline
  (setq-default indent-tabs-mode nil)        ; spaces instead of tabs
  (setq mode-require-final-newline t)        ; adds \n at the end of file
  (setq mouse-wheel-progressive-speed nil)   ; sane mouse wheel scrolling
  (fset 'yes-or-no-p 'y-or-n-p)              ; prompt y/n instead of yes/no
  (setq confirm-kill-emacs 'y-or-n-p)        ; confirmation on exit
  ;; (setq gc-cons-percentage 0.1)


  ;; scrolling
  (setq scroll-conservatively most-positive-fixnum)           ; removes jumpiness when scrolling
  (setq scroll-margin 4)                     ; scroll before getting to the end of the screen
  (setq scroll-step 1)
  (setq redisplay-dont-pause t)
  (setq scroll-preserve-screen-position 1)
  (setq auto-window-vscroll nil)

  ;; backups
  (setq backup-directory-alist `(("." . "~/.emacs.d/bak")))
  (setq auto-save-file-name-transforms
          `((".*" "~/.emacs.d/bak/autosaves" t))) ;;asdasds
  (setq delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)

  ;; history length options
  (setq history-length 100)
  (put 'minibuffer-history 'history-length 50)
  (put 'evil-ex-history 'history-length 50)
  (put 'kill-ring 'history-length 25)
#+END_SRC
* Persistence
#+BEGIN_SRC emacs-lisp :tangle yes
  (save-place-mode 1) ; remember point location when killing buffer
#+END_SRC
* Shell
#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
* Line numbers
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq display-line-numbers-type 'relative)
  (setq display-line-numbers-grow-only t)
  (setq display-line-numbers-width-start 3)
  (global-display-line-numbers-mode)
#+END_SRC
* Word wrapping
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq fill-column 79)
  (require 'fill-column-indicator)
  ;; (fci-mode 1)
  ;; (global-visual-fill-column-mode 1)
  ;; (global-visual-line-mode 1)
  (adaptive-wrap-prefix-mode 1)
  (toggle-word-wrap 1)
#+END_SRC
* Parens
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (setq electric-pair-preserve-balance nil) ; Auto-complete brackets, etc.
  ;; (electric-pair-mode t)
  (show-paren-mode 1) ; highlight paired parens
#+END_SRC
* Cursor, hl-line
#+BEGIN_SRC emacs-lisp :tangle yes
  (blink-cursor-mode 0)
  (global-hl-line-mode 1)
  (set-cursor-color "firebrick")
  (set-face-background 'hl-line "gainsboro")
  (set-face-foreground 'highlight nil)
  (setq size-indication-mode t)
#+END_SRC
* Modeline
#+BEGIN_SRC emacs-lisp :tangle yes
  (display-time-mode 1)
  (setq display-time-24hr-format t)
  (setq column-number-mode t)
  (set-face-foreground 'mode-line "white smoke")
  (set-face-background 'mode-line "navy")
  
  (defun mode-line-fill (face reserve)
      "Return empty space using FACE and leaving RESERVE space on the right."
      (when
      (and window-system (eq 'right (get-scroll-bar-mode)))
      (setq reserve (- reserve 3)))
      (propertize " "
      'display
      `((space :align-to (- (+ right right-fringe right-margin) ,reserve)))
      'face "white smoke"))
  
  (defun d/flycheck-lighter (state)
      "Return flycheck information for the given error type STATE. Source: https://git.io/vQKzv"
      (let* ((counts (flycheck-count-errors flycheck-current-errors))
              (errorp (flycheck-has-current-errors-p state))
              (err (or (cdr (assq state counts)) "?"))
              (running (eq 'running flycheck-last-status-change)))
  
      (if (or errorp running) (format "â€¢%s" err))))
  
  (setq-default mode-line-format
      (list
      ;; left align
      ;; ==========
  
      ;; major mode name
      " %m | "
  
      ;; buffer name and read-only/modified coloring
      '(:eval
          (propertize "%b" 'face
          (if buffer-read-only
              '(:foreground "green3" :weight bold)
          (if (buffer-modified-p)
              '(:foreground "red" :weight bold)
              '(:weight bold)))))
  
      ;; version control
      '(vc-mode (" | " (:eval (substring vc-mode 1))))
      " | %p of %I | " ;; size
  
      ;; current column
      "C:%02c"
  
      ;; flycheck
          '(:eval
          (when (and (bound-and-true-p flycheck-mode)
                      (or flycheck-current-errors
                          (eq 'running flycheck-last-status-change)))
              (concat " | "
              (cl-loop for state in '((error . "#FB4933")
                                      (warning . "#FABD2F")
                                      (info . "#83A598"))
                      as lighter = (d/flycheck-lighter (car state))
                      when lighter
                      concat (propertize
                              lighter
                              'face `(:foreground ,(cdr state))))
              " ")))
  
      ;; right align
      ;; ===========
      (mode-line-fill 'mode-line 6)
  
      ;; clock
      "%H%M"
  ))
#+END_SRC
* Keyboard shortcuts
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-c e") (lambda() (interactive) (load-file user-init-file)))
  (global-set-key (kbd "<f5>")  'eshell)
  (global-set-key (kbd "C-c b") 'previous-buffer)
  (global-set-key (kbd "C-c n") 'next-buffer)
  (global-set-key (kbd "C-c v") 'set-variable)
  
  (global-set-key (kbd "<f1>")     'describe-key)
  (global-set-key (kbd "C-c <f1>") 'which-key-show-major-mode)
  (global-set-key (kbd "<f2>")     'other-window)
  (global-set-key (kbd "<f3>")     'delete-other-windows)
  (global-set-key (kbd "<f4>")     'delete-window)
  (global-set-key (kbd "<f6>") (lambda() (interactive) (find-file "~/.emacs")))
  
  (define-key key-translation-map (kbd "<print>") (kbd "ESC"))
  
  (global-set-key (kbd "C-c u") 'universal-argument)
  (global-set-key (kbd "C-;")   'comment-line)
  
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  
  (global-set-key (kbd "S-C-<left>")  'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>")  'shrink-window)
  (global-set-key (kbd "S-C-<up>")    'enlarge-window)
#+END_SRC
* Recentf
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'recentf)
(recentf-mode 1)
(global-set-key (kbd "C-c r") 'recentf-open-files)
#+END_SRC
* C mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq c-default-style "java")
#+END_SRC
* IBuffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my/define-projectile-filter-groups ()
    (when (boundp 'projectile-known-projects)
      (setq my/project-filter-groups
          (mapcar
           (lambda (it)
             (let ((name (file-name-nondirectory (directory-file-name it))))
               `(,name (filename . ,(expand-file-name it)))))
           projectile-known-projects))))

  ;; Set up default ibuffer filter groups
  (setq ibuffer-saved-filter-groups
        (list
         (cons "default"
               (append
                (my/define-projectile-filter-groups)
                ;; ... whatever other groups you want, e.g.
                '(("Dired" (mode . dired-mode))
                  ("Planner" (or
                              (name . "^\\*Calendar\\*$")
                              (name . "^diary$")
                              (mode . muse-mode)))
                  ("Magit" (name . "^\\magit"))
                  ("Internal" (or 
                                (name . "^\\*.*$")
                                (name . "^\\Treemacs.*$")))
                 )))))
            ;; Enable default groups by default
  (add-hook 'ibuffer-mode-hook
                (lambda ()
                  (ibuffer-switch-to-saved-filter-groups "default")))

  ;; You probably don't want to see empty project groups
  (setq ibuffer-show-empty-filter-groups nil)
#+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'dired+)
  (diredp-toggle-find-file-reuse-dir 1)
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (setq org-src-fontify-natively t)

  ;; smaller #+begin_src font in org-mode
  (set-face-attribute 'org-meta-line nil :height 0.7 :slant 'normal)

  (setq org-export-coding-system 'utf-8)
  (setq org-agenda-files (concat org-directory "/agenda.org"))

  (setq org-default-notes-file (concat org-directory "/capture.org"))
  (setq org-capture-templates
 '(("t" "Todo" entry (file+headline "~/org/todo.org" "Tasks")
        "* TODO %?\n  %i\n")
   ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
        "* %?\nEntered on %U\n  %i\n")))
#+END_SRC
* Winner mode 
#+BEGIN_SRC emacs-lisp :tangle yes
  (winner-mode)
  #+END_SRC
* =========================
* Evil
** Evil Leader
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq evil-want-keybinding nil) ; on update it said to load it before evil
  (use-package evil-leader
    :config
    (global-evil-leader-mode 1) ; has to be enabled *before* evil-mode loads
    (evil-leader-mode 1)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "TAB" 'my-alternate-buffer 
      "[" 'winner-undo
      "]" 'winner-redo
      "a" 'align-regexp
      "b" 'ibuffer
      "c" 'org-capture
      "e" 'helm-flycheck
      "f" 'helm-find-files
      "g" 'google-this
      "h" 'hydra-help/body
      "j" 'ace-jump-mode
      "k" 'kill-this-buffer
      "m" 'magit-status
      "n" 'hydra-navigation/body
      "o" 'other-window
      "t" 'treemacs
      "w" 'delete-window
      "z" '(lambda() (interactive) (find-file "~/.emacs.d/myconfig/conf.org"))))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil
    :init
    (setq evil-want-integration t)
    :config
    (evil-mode 1)
    (when (require 'evil-collection nil t)
      (evil-collection-init))
    ;; Set emacs mode for these buffers:
    (evil-set-initial-state 'eshell-mode 'emacs)
    (evil-set-initial-state 'term-mode 'emacs)
    (evil-set-initial-state 'ansi-term-mode 'emacs)
    (evil-set-initial-state 'Custom-mode 'emacs)
  
    (setq evil-respect-visual-line-mode t)
    (define-key evil-normal-state-map "U" 'undo-tree-redo)
    (define-key evil-normal-state-map "\C-u" 'evil-scroll-up) ; C-u scrolls up now
    ;; Make evil-mode up/down operate in screen lines instead of logical line
    (define-key evil-motion-state-map "j" 'evil-next-visual-line)
    (define-key evil-motion-state-map "k" 'evil-previous-visual-line)
    ;; Also in visual mode
    (define-key evil-visual-state-map "j" 'evil-next-visual-line)
    (define-key evil-visual-state-map "k" 'evil-previous-visual-line))
  ;; center screen while searching
  (defadvice evil-search-next
    (after advice-for-evil-search-next activate)
    (evil-scroll-line-to-center (line-number-at-pos)))
  (defadvice evil-search-previous
    (after advice-for-evil-search-previous activate)
    (evil-scroll-line-to-center (line-number-at-pos)))
#+END_SRC
** Evil Magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil-magit)
#+END_SRC
** Evil Surround
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC
** Evil Commentary
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil-commentary
    :config
    (evil-commentary-mode))
  #+END_SRC
** Evil Goggles
Animations for text changes in evil mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil-goggles
    :init
    (setq evil-goggles-duration 0.200) ; default is 0.200
    :config
    (evil-goggles-mode)) 
#+END_SRC
** Evil Org
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-evil)

  (eval-after-load 'org-agenda
  '(progn
    (evil-set-initial-state 'org-agenda-mode 'normal)
    (evil-define-key 'normal org-agenda-mode-map
      (kbd "<RET>") 'org-agenda-switch-to
      (kbd "\t") 'org-agenda-goto

      "q" 'org-agenda-quit
      "r" 'org-agenda-redo
      "S" 'org-save-all-org-buffers
      "gj" 'org-agenda-goto-date
      "gJ" 'org-agenda-clock-goto
      "gm" 'org-agenda-bulk-mark
      "go" 'org-agenda-open-link
      "s" 'org-agenda-schedule
      "+" 'org-agenda-priority-up
      "," 'org-agenda-priority
      "-" 'org-agenda-priority-down
      "y" 'org-agenda-todo-yesterday
      "n" 'org-agenda-add-note
      "t" 'org-agenda-todo
      ":" 'org-agenda-set-tags
      ";" 'org-timer-set-timer
      "I" 'helm-org-task-file-headings
      "i" 'org-agenda-clock-in-avy
      "O" 'org-agenda-clock-out-avy
      "u" 'org-agenda-bulk-unmark
      "x" 'org-agenda-exit
      "j"  'org-agenda-next-line
      "k"  'org-agenda-previous-line
      "vt" 'org-agenda-toggle-time-grid
      "va" 'org-agenda-archives-mode
      "vw" 'org-agenda-week-view
      "vl" 'org-agenda-log-mode
      "vd" 'org-agenda-day-view
      "vc" 'org-agenda-show-clocking-issues
      "g/" 'org-agenda-filter-by-tag
      "o" 'delete-other-windows
      "gh" 'org-agenda-holiday
      "gv" 'org-agenda-view-mode-dispatch
      "f" 'org-agenda-later
      "b" 'org-agenda-earlier
      "c" 'helm-org-capture-templates
      "e" 'org-agenda-set-effort
      "n" nil  ; evil-search-next
      "{" 'org-agenda-manipulate-query-add-re
      "}" 'org-agenda-manipulate-query-subtract-re
      "A" 'org-agenda-toggle-archive-tag
      "." 'org-agenda-goto-today
      "0" 'evil-digit-argument-or-evil-beginning-of-line
      "<" 'org-agenda-filter-by-category
      ">" 'org-agenda-date-prompt
      "F" 'org-agenda-follow-mode
      "D" 'org-agenda-deadline
      "H" 'org-agenda-holidays
      "J" 'org-agenda-next-date-line
      "K" 'org-agenda-previous-date-line
      "L" 'org-agenda-recenter
      "P" 'org-agenda-show-priority
      "R" 'org-agenda-clockreport-mode
      "Z" 'org-agenda-sunrise-sunset
      "T" 'org-agenda-show-tags
      "X" 'org-agenda-clock-cancel
      "[" 'org-agenda-manipulate-query-add
      "g\\" 'org-agenda-filter-by-tag-refine
      "]" 'org-agenda-manipulate-query-subtract)))
#+END_SRC
** Evil Nerd Commenter #DISABLED
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package evil-nerd-commenter
  ;;   :config
  ;;   (require 'evil-nerd-commenter)
  ;;   (evilnc-default-hotkeys))
  #+END_SRC
* Hydra
** Hydra
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hydra
    :config
    (setq hydra-is-helpful t))
#+END_SRC
** Navigation
#+BEGIN_SRC emacs-lisp :tangle yes
  (defhydra hydra-navigation ()
    "navigation"
    ("j" evil-scroll-down "down")
    ("k" evil-scroll-up "up")
    ("SPC" nil "exit"))
#+END_SRC
** Windows
#+BEGIN_SRC emacs-lisp :tangle yes
  (defhydra hydra-windows ()
    "windows"
    ("w" winner-undo "del" :exit t)
    ("o" other-window "other" :exit t))
#+END_SRC
** Help
#+BEGIN_SRC emacs-lisp :tangle yes
  (defhydra hydra-help ()
    "help"
    ("e" helm-info-emacs "helm-info-emacs" :exit t)
    ("h" helpful-at-point "helpful-at-point" :exit t)
    ("b" helm-descbinds "helm-descbinds" :exit t)
    ("m" helm-describe-modes "helm-describe-modes" :exit t)
    ("v" describe-variable "describe variable" :exit t))
#+END_SRC
** ibuffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (defhydra hydra-ibuffer-main (:color pink :hint nil)
    "
   ^Navigation^ | ^Mark^        | ^Actions^        | ^View^
  -^----------^-+-^----^--------+-^-------^--------+-^----^-------
    _k_:    ÊŒ   | _m_: mark     | _D_: delete      | _g_: refresh
   _RET_: visit | _u_: unmark   | _S_: save        | _s_: sort
    _j_:    v   | _*_: specific | _a_: all actions | _/_: filter
  -^----------^-+-^----^--------+-^-------^--------+-^----^-------
  "
    ("j" ibuffer-forward-line)
    ("RET" ibuffer-visit-buffer :color blue)
    ("k" ibuffer-backward-line)
    ("m" ibuffer-mark-forward)
    ("u" ibuffer-unmark-forward)
    ("*" hydra-ibuffer-mark/body :color blue)
    ("D" ibuffer-do-delete)
    ("S" ibuffer-do-save)
    ("a" hydra-ibuffer-action/body :color blue)
    ("g" ibuffer-update)
    ("s" hydra-ibuffer-sort/body :color blue)
    ("/" hydra-ibuffer-filter/body :color blue)
    ("o" ibuffer-visit-buffer-other-window "other window" :color blue)
    ("q" quit-window "quit ibuffer" :color blue)
    ("SPC" nil "toggle hydra" :color blue))
  
  (defhydra hydra-ibuffer-mark (:color teal :columns 5
                                :after-exit (hydra-ibuffer-main/body))
    "Mark"
    ("*" ibuffer-unmark-all "unmark all")
    ("M" ibuffer-mark-by-mode "mode")
    ("m" ibuffer-mark-modified-buffers "modified")
    ("u" ibuffer-mark-unsaved-buffers "unsaved")
    ("s" ibuffer-mark-special-buffers "special")
    ("r" ibuffer-mark-read-only-buffers "read-only")
    ("/" ibuffer-mark-dired-buffers "dired")
    ("e" ibuffer-mark-dissociated-buffers "dissociated")
    ("h" ibuffer-mark-help-buffers "help")
    ("z" ibuffer-mark-compressed-file-buffers "compressed")
    ("b" hydra-ibuffer-main/body "back" :color blue))
  
  (defhydra hydra-ibuffer-action (:color teal :columns 4
                                  :after-exit
                                  (if (eq major-mode 'ibuffer-mode)
                                      (hydra-ibuffer-main/body)))
    "Action"
    ("A" ibuffer-do-view "view")
    ("E" ibuffer-do-eval "eval")
    ("F" ibuffer-do-shell-command-file "shell-command-file")
    ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
    ("H" ibuffer-do-view-other-frame "view-other-frame")
    ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
    ("M" ibuffer-do-toggle-modified "toggle-modified")
    ("O" ibuffer-do-occur "occur")
    ("P" ibuffer-do-print "print")
    ("Q" ibuffer-do-query-replace "query-replace")
    ("R" ibuffer-do-rename-uniquely "rename-uniquely")
    ("T" ibuffer-do-toggle-read-only "toggle-read-only")
    ("U" ibuffer-do-replace-regexp "replace-regexp")
    ("V" ibuffer-do-revert "revert")
    ("W" ibuffer-do-view-and-eval "view-and-eval")
    ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
    ("b" nil "back"))
  
  (defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
    "Sort"
    ("i" ibuffer-invert-sorting "invert")
    ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
    ("v" ibuffer-do-sort-by-recency "recently used")
    ("s" ibuffer-do-sort-by-size "size")
    ("f" ibuffer-do-sort-by-filename/process "filename")
    ("m" ibuffer-do-sort-by-major-mode "mode")
    ("b" hydra-ibuffer-main/body "back" :color blue))
  
  (defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
    "Filter"
    ("m" ibuffer-filter-by-used-mode "mode")
    ("M" ibuffer-filter-by-derived-mode "derived mode")
    ("n" ibuffer-filter-by-name "name")
    ("c" ibuffer-filter-by-content "content")
    ("e" ibuffer-filter-by-predicate "predicate")
    ("f" ibuffer-filter-by-filename "filename")
    (">" ibuffer-filter-by-size-gt "size")
    ("<" ibuffer-filter-by-size-lt "size")
    ("/" ibuffer-filter-disable "disable")
    ("b" hydra-ibuffer-main/body "back" :color blue))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (defhydra hydra-magit (:color blue :columns 8)
    "Magit"
    ("s" magit-status "status")
    ("c" magit-checkout "checkout")
    ("m" magit-merge "merge")
    ("l" magit-log "log")
    ("!" magit-git-command "command")
    ("$" magit-process "process")
    ("g" hydra-git-gutter/body "git gutter"))
#+END_SRC
** Git gutter
#+BEGIN_SRC emacs-lisp :tangle yes
  (defhydra hydra-git-gutter()
    "git-gutter"
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("SPC" nil "exit"))
#+END_SRC
* Projectile 
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package projectile
    :init
    (setq projectile-keymap-prefix (kbd "C-c p"))
    :config
    (projectile-mode 1))
  #+END_SRC
* Which Key
  #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :defer 1
    :config (which-key-mode))
  (which-key-setup-side-window-right-bottom)
  (setq which-key-idle-delay 0.2)
  #+END_SRC
* Company
  #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (with-eval-after-load 'company
      (add-hook 'c++-mode-hook 'company-mode)
      (add-hook 'c-mode-hook 'company-mode)))
  
  (use-package company-c-headers
    :ensure t)
  (setq company-backends (delete 'company-semantic company-backends))
  (add-to-list 'company-backends 'company-c-headers)
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm
    :config
    (helm-mode)
    (setq helm-mode-fuzzy-match t)
    (global-set-key (kbd "M-x") 'helm-M-x)
    (setq helm-autoresize-mode t))

  (use-package helm-descbinds
    :config
    (helm-descbinds-mode)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "C-h a") 'helm-apropos))

  ;; helm-company
  (autoload 'helm-company "helm-company") ; not necessary if using ELPA package
  (eval-after-load 'company
    '(progn
       (define-key company-mode-map (kbd "C-:") 'helm-company)
       (define-key company-active-map (kbd "C-:") 'helm-company)))
  (add-to-list 'company-backends 'company-math-symbols-unicode)
  
  (use-package helm-projectile
    :config
    (helm-projectile-on))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :config
    (global-flycheck-mode)
    (add-hook 'after-init-hook #'global-flycheck-mode)
    (setq flycheck-pos-tip-mode t)
    (with-eval-after-load 'flycheck
      (flycheck-pos-tip-mode))) ; show tooltip when point is on the error
  
  (use-package flycheck-inline)
#+END_SRC
* YASnippet
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :init
    (add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
    :config
    (yas-global-mode 1))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit)
#+END_SRC
* Shackle 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package shackle)
  (shackle-mode t)
  (setq helm-display-function 'pop-to-buffer)
  (setq shackle-rules
        '(("*helm-ag*"              :select t   :align right :size 0.5)
          ("*helm semantic/imenu*"  :select t   :align right :size 0.4)
          ("*helm org inbuffer*"    :select t   :align right :size 0.4)
          (flycheck-error-list-mode :select nil :align below :size 0.4)
          (compilation-mode         :select t   :align below :size 0.5)
          (messages-buffer-mode     :select t   :align below :size 0.3)
          (inferior-emacs-lisp-mode :select t   :align below :size 0.3)
          (ert-results-mode         :select t   :align below :size 0.5)
          (calendar-mode            :select t   :align below :size 0.3)
          (racer-help-mode          :select t   :align right :size 0.5)
          (help-mode                :select t   :align below :size 0.5)
          (helpful-mode             :select t   :align below :size 0.5)
          (magit-log-mode           :select t   :align right :size 0.5)
          (magit-diff-mode          :select t   :align right :size 0.7)
          (magit-revision-mode      :select t   :align right :size 0.7)
          ("*Warnings*"             :select t   :align below :size 0.5)
          ("*Compile-Log*"          :select t   :align below :size 0.5)
          (" *Deletions*"           :select t   :align below :size 0.3)
          (" *Marked Files*"        :select t   :align below :size 0.3)
          ("*Org Select*"           :select t   :align below :size 0.3)
          ("*Org Note*"             :select t   :align below :size 0.3)
          ("*Org Links*"            :select t   :align below :size 0.2)
          (" *Org todo*"            :select t   :align below :size 0.2)
          ("*Man.*"                 :select t   :align right :size 0.55 :regexp t)
          ("*helm.*"                :select t   :align below :size 0.5  :regexp t)
          ("*Org Src.*"             :select t   :align right :size 0.8  :regexp t)))
  #+END_SRC
** Rules
;; Elements of the `shackle-rules' alist:
;;
;; |-----------+------------------------+--------------------------------------------------|
;; | CONDITION | symbol                 | Major mode of the buffer to match                |
;; |           | string                 | Name of the buffer                               |
;; |           |                        | - which can be turned into regexp matching       |
;; |           |                        | by using the :regexp key with a value of t       |
;; |           |                        | in the key-value part                            |
;; |           | list of either         | a list groups either symbols or strings          |
;; |           | symbol or string       | (as described earlier) while requiring at        |
;; |           |                        | least one element to match                       |
;; |           | t                      | t as the fallback rule to follow when no         |
;; |           |                        | other match succeeds.                            |
;; |           |                        | If you set up a fallback rule, make sure         |
;; |           |                        | it's the last rule in shackle-rules,             |
;; |           |                        | otherwise it will always be used.                |
;; |-----------+------------------------+--------------------------------------------------|
;; | KEY-VALUE | :select t              | Select the popped up window. The                 |
;; |           |                        | `shackle-select-reused-windows' option makes     |
;; |           |                        | this the default for windows already             |
;; |           |                        | displaying the buffer.                           |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :inhibit-window-quit t | Special buffers usually have `q' bound to        |
;; |           |                        | `quit-window' which commonly buries the buffer   |
;; |           |                        | and deletes the window. This option inhibits the |
;; |           |                        | latter which is especially useful in combination |
;; |           |                        | with :same, but can also be used with other keys |
;; |           |                        | like :other as well.                             |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :ignore t              | Skip handling the display of the buffer in       |
;; |           |                        | question. Keep in mind that while this avoids    |
;; |           |                        | switching buffers, popping up windows and        |
;; |           |                        | displaying frames, it does not inhibit what may  |
;; |           |                        | have preceded this command, such as the          |
;; |           |                        | creation/update of the buffer to be displayed.   |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :same t                | Display buffer in the current window.            |
;; |           | :popup t               | Pop up a new window instead of displaying        |
;; |           | *mutually exclusive*   | the buffer in the current one.                   |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :other t               | Reuse the window `other-window' would select if  |
;; |           | *must not be used      | there's more than one window open, otherwise pop |
;; |           | with :align, :size*    | up a new window. When used in combination with   |
;; |           |                        | the :frame key, do the equivalent to             |
;; |           |                        | other-frame or a new frame                       |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :align                 | Align a new window at the respective side of     |
;; |           | 'above, 'below,        | the current frame or with the default alignment  |
;; |           | 'left, 'right,         | (customizable with `shackle-default-alignment')  |
;; |           | or t (default)         | by deleting every other window than the          |
;; |           |                        | currently selected one, then wait for the window |
;; |           |                        | to be "dealt" with. This can either happen by    |
;; |           |                        | burying its buffer with q or by deleting its     |
;; |           |                        | window with C-x 0.                               |
;; |           | :size                  | Aligned window use a default ratio of 0.5 to     |
;; |           | a floating point       | split up the original window in half             |
;; |           | value between 0 and 1  | (customizable with `shackle-default-size'), the  |
;; |           | is interpreted as a    | size can be changed on a per-case basis by       |
;; |           | ratio. An integer >=1  | providing a different floating point value like  |
;; |           | is interpreted as a    | 0.33 to make it occupy a third of the original   |
;; |           | number of lines.       | window's size.                                   |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :frame t               | Pop buffer to a frame instead of a window.       |
;; |-----------+------------------------+--------------------------------------------------|
* =========================
* Various packages
** help-fns+
 #+BEGIN_SRC emacs-lisp :tangle yes
  (require 'help-fns+)
 #+END_SRC
** Smooth scrolling
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package smooth-scrolling
  ;; :config
  ;; (smooth-scrolling-mode)
  ;; (setq smooth-scroll-margin 4))
#+END_SRC
** Rainbow delimiters
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    :config
    (set-face-attribute 'rainbow-delimiters-mismatched-face nil
                        :foreground "Red")
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                        :foreground "Red"))
#+END_SRC
** Olivetti
 Centers the text in the window.
 #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package olivetti
    :config
    (setq olivetti-body-width 120)
    (global-set-key (kbd "C-c o") 'olivetti-mode))
 #+END_SRC
** Org bullets
 #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-bullets
      :hook (org-mode . org-bullets-mode))
   #+END_SRC
** Smartparens
Run sp-cheat-sheet for a list of commands.
 #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smartparens
    :init
    (require 'smartparens-config)
    :config
    (smartparens-global-mode 0))
 #+END_SRC
** Dumb jump
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dumb-jump)
  (use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
  :ensure)
#+END_SRC
** Ace Jump Mode
 #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ace-jump-mode)
 #+END_SRC
** Try
 #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package try)
 #+END_SRC
** Highlight indent guides
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package highlight-indent-guides
    :init
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'character))
#+END_SRC
** Expand region
 #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package expand-region
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
 #+END_SRC
** Man 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package man)
#+END_SRC
** Git gutter
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package git-gutter
     :init
     (global-git-gutter-mode))
 #+END_SRC
** Pdf Tools
 #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pdf-tools
    :config
    (pdf-tools-install))
  (add-hook 'pdf-view-mode-hook (lambda() (display-line-numbers-mode -1)))
 #+END_SRC
** Google this
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package google-this)
#+END_SRC
** Treemacs 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package treemacs
    :init
    (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
            treemacs-deferred-git-apply-delay   0.5
            treemacs-display-in-side-window     t
            treemacs-file-event-delay           5000
            treemacs-file-follow-delay          0.2
            treemacs-follow-after-init          t
            treemacs-follow-recenter-distance   0.1
            treemacs-git-command-pipe           ""
            treemacs-goto-tag-strategy          'refetch-index
            treemacs-indentation                2
            treemacs-indentation-string         " "
            treemacs-is-never-other-window      nil
            treemacs-max-git-entries            5000
            treemacs-no-png-images              nil
            treemacs-no-delete-other-windows    t
            treemacs-project-follow-cleanup     nil
            treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-after-file-follow nil
            treemacs-recenter-after-tag-follow  nil
            treemacs-show-cursor                nil
            treemacs-show-hidden-files          t
            treemacs-silent-filewatch           nil
            treemacs-silent-refresh             nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-space-between-root-nodes   t
            treemacs-tag-follow-cleanup         t
            treemacs-tag-follow-delay           1.5
            treemacs-width                      35)
  
      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)
  
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag))) 

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)
  
  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)
#+END_SRC
** Centered cursor
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package centered-cursor-mode)
#+END_SRC
** Discover my major
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package discover-my-major)
#+END_SRC
** Paradox # DISABLED
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package paradox)
#+END_SRC
** Spaceline # DISABLED
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package spaceline
  ;;   :init
  ;;   (require 'spaceline-config)
  ;;   (spaceline-emacs-theme)
  ;;   (spaceline-toggle-minor-modes-off)
  ;;   (spaceline-toggle-buffer-position-on))
#+END_SRC
** Smart modeline # DISABLED
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package smart-mode-line
  ;; :init
  ;; (setq sml/override-theme nil)
  ;; (setq sml/no-confirm-load-theme t)
  ;; (setq sml/mode-width full)
  ;; :config
  ;; (sml/setup))
#+END_SRC
** Doom modeline # DISABLED
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package all-the-icons)
;; (use-package doom-modeline
      ;; :ensure t
      ;; :defer t
      ;; :hook (after-init . doom-modeline-init))
#+END_SRC
** Feebleline # DISABLED
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package    feebleline
  ;; :ensure       t
  ;; :custom       (feebleline-show-git-branch             t)
                ;; (feebleline-show-dir                    t)
                ;; (feebleline-show-time                   t)
                ;; (feebleline-show-previous-buffer        nil)
  ;; :config       (feebleline-mode 1))
#+END_SRC
** Popwin # DISABLED
 #+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package popwin
  ;; :config
  ;; (popwin-mode 1)
  ;; (global-set-key (kbd "C-c p") popwin:keymap))
 #+END_SRC
** Telephone line # DISABLED
 #+BEGIN_SRC emacs-lisp :tangle yes
 ;; (use-package telephone-line
   ;; :init
     ;; :config
   ;; (telephone-line-mode))
 #+END_SRC
* Defuns
#+BEGIN_SRC emacs-lisp :tangle yes
(defun my-alternate-buffer (&optional window)
  "Switch back and forth between current and last buffer in the
current window."
  (interactive)
  (let ((current-buffer (window-buffer window))
        (buffer-predicate
         (frame-parameter (window-frame window) 'buffer-predicate)))
    ;; switch to first buffer previously shown in this window that matches
    ;; frame-parameter `buffer-predicate'
    (switch-to-buffer
     (or (cl-find-if (lambda (buffer)
                       (and (not (eq buffer current-buffer))
                            (or (null buffer-predicate)
                                (funcall buffer-predicate buffer))))
                     (mapcar #'car (window-prev-buffers window)))
         ;; `other-buffer' honors `buffer-predicate' so no need to filter
         (other-buffer current-buffer t)))))
#+END_SRC
* Custom file
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq custom-file (concat user-emacs-directory "/myconfig/.custom.el"))
  (load custom-file 'noerror)
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+END_SRC
* Checkout
https://github.com/bmag/emacs-purpose
* Ideas
Project-specific hydras (compilation, build options).
Make a generic compilation hydra (run make, for example).
